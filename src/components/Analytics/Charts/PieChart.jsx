import React, { useState, useEffect } from "react";
import { Box, FormControl, InputLabel, Select, MenuItem } from "@mui/material";
import {
  Tooltip,
  Legend,
  PieChart,
  Pie,
  Cell,
} from 'recharts';

export const PieChartAnalytics = ({
  pieChartData,
  selectedGrades = [],
  selectedGradeField = "",
  setSelectedGradeField = () => { },
  isLOChart = false,
  loCode = ""
}) => {
  function formatFieldNameForFilter(field) {
    // Ch√®n d·∫•u c√°ch tr∆∞·ªõc c√°c ch·ªØ c√°i in hoa, sau ƒë√≥ vi·∫øt hoa ch·ªØ c√°i ƒë·∫ßu ti√™n
    // const result = field.replace(/([A-Z])/g, " $1").trim();
    // const name = result.charAt(0).toUpperCase() + result.slice(1);
    if (field === "totalGrade") {
      return "ƒêi·ªÉm T·ªïng";
    } else if (field === "midtermGrade") {
      return "ƒêi·ªÉm Gi·ªØa K·ª≥";
    } else if (field === "finalGrade") {
      return "ƒêi·ªÉm Cu·ªëi K·ª≥";
    } else if (field === "projectGrade") {
      return "ƒêi·ªÉm ƒê·ªì √Ån";
    } else if (field === "practiceGrade") {
      return "ƒêi·ªÉm Th·ª±c H√†nh";
    }
  };

  const handleGradeFieldChange = (e) => {
    console.log(e.target.value);
    setSelectedGradeField(e.target.value);
  };

  if (!pieChartData) return null;

  // Mapping m√†u s·∫Øc ƒë√∫ng √Ω nghƒ©a
  const colorMap = {
    'Xu·∫•t S·∫Øc': '#a259e6', // t√≠m
    'Gi·ªèi': '#3b82f6',    // xanh d∆∞∆°ng
    'Kh√°': '#10b981',     // xanh l√°
    'Trung B√¨nh': '#f59e0b', // v√†ng
    'Y·∫øu': '#ef4444',     // ƒë·ªè
  };
  const labelOrder = ['Xu·∫•t S·∫Øc', 'Gi·ªèi', 'Kh√°', 'Trung B√¨nh', 'Y·∫øu'];
  const colors = ["#a259e6", "#3b82f6", "#10b981", "#f59e0b", "#ef4444"];
  const defaultColors = labelOrder.map(label => colorMap[label]);

  // H√†m chu·∫©n h√≥a label ƒë·ªÉ so s√°nh
  function normalizeLabel(label) {
    console.log('üîç normalizeLabel:', label);
    if (!label) return '';
    return label.toString().trim().toLowerCase();
  }

  return (
    <Box boxShadow={isLOChart ? 0 : 3} p={isLOChart ? 0 : 2} display="flex" flexDirection="column" alignItems="center" gap={isLOChart ? "10px" : "20px"}>
      {/* Header trong Box ch·ª©a PieChart, c√≥ ti√™u ƒë·ªÅ v√† dropdown filter */}
      {!isLOChart && (
        <h3 style={{ margin: 0 }}>
          {isLOChart
            ? `T·ª∑ l·ªá ƒë·∫°t/tr∆∞·ª£t - ${loCode}`
            : `(Bi·ªÉu ƒë·ªì tr√≤n) Ph√¢n b·ªë ƒëi·ªÉm theo ${formatFieldNameForFilter(selectedGradeField)}`
          }
        </h3>
      )}

      {/* Bi·ªÉu ƒë·ªì Pie */}
      <PieChart width={isLOChart ? 250 : 600} height={isLOChart ? 180 : 500}>
        <Pie
          data={pieChartData}
          dataKey="count"
          nameKey="label"
          cx="50%"
          cy="50%"
          outerRadius={isLOChart ? 60 : 150}
          fill="#8884d8"
          label={!isLOChart}
        >
          {pieChartData.map((entry, index) => {
            console.log("entry: ", entry);
            const normLabel = normalizeLabel(entry.label);
            console.log(normLabel);
            // Lu√¥n l·∫•y ƒë√∫ng m√†u theo label, fallback n·∫øu kh√¥ng kh·ªõp
            return (
              <Cell
                key={`cell-${index}`}
                fill={colorMap[normLabel] || colors[index % colors.length]}
              />
            );
          })}
        </Pie>
        <Tooltip />
        <Legend
          payload={labelOrder
            .filter(label => pieChartData.some(d => normalizeLabel(d.label) === label))
            .map(label => ({
              value: label.charAt(0).toUpperCase() + label.slice(1).replace('binh', 'B√¨nh'),
              type: 'circle',
              color: colorMap[label]
            }))
          }
        />
      </PieChart>
      {!isLOChart && selectedGrades && selectedGrades.length > 0 && (
        <FormControl variant="outlined" size="small" style={{ width: "200px" }}>
          <InputLabel id="grade-field-label">Ch·ªçn lo·∫°i ƒëi·ªÉm</InputLabel>
          <Select
            labelId="grade-field-label"
            value={selectedGradeField}
            onChange={handleGradeFieldChange}
            label="Ch·ªçn lo·∫°i ƒëi·ªÉm"
          >
            {selectedGrades.map((field) => (
              <MenuItem key={field} value={field}>
                {formatFieldNameForFilter(field)}
              </MenuItem>
            ))}
          </Select>
        </FormControl>
      )}
    </Box>
  );
};